{"version":3,"sources":["../src/actions/perpTrade.ts","../src/types.ts","../src/templates.ts","../src/services/utils.ts","../src/services/trade.ts","../src/actions/accountSummary.ts","../src/services/account.ts","../src/actions/cancelOrders.ts","../src/index.ts"],"sourcesContent":["import {\n    type Action,\n    type ActionExample,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    ModelClass,\n} from \"@elizaos/core\";\nimport {\n    DeskExchangeError,\n    PlaceOrderRequest,\n    PlaceOrderSchema,\n} from \"../types\";\nimport { perpTradeTemplate } from \"../templates\";\nimport { ethers } from \"ethers\";\nimport {\n    generateNonce,\n    generateJwt,\n    getSubaccount,\n    getEndpoint,\n    formatNumber,\n} from \"../services/utils\";\nimport { placeOrder } from \"../services/trade\";\n\nexport const perpTrade: Action = {\n    name: \"PERP_TRADE\",\n    similes: [\"PERP_ORDER\", \"PERP_BUY\", \"PERP_SELL\"],\n    description: \"Place a perpetual contract trade order on DESK Exchange\",\n    validate: async (runtime: IAgentRuntime) => {\n        return !!(\n            runtime.getSetting(\"DESK_EXCHANGE_PRIVATE_KEY\") &&\n            runtime.getSetting(\"DESK_EXCHANGE_NETWORK\")\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        // Initialize or update state\n        state = !state\n            ? await runtime.composeState(message)\n            : await runtime.updateRecentMessageState(state);\n\n        const context = composeContext({\n            state,\n            template: perpTradeTemplate,\n        });\n\n        const content = await generateObjectDeprecated({\n            runtime,\n            context,\n            modelClass: ModelClass.SMALL,\n        });\n\n        try {\n            if (!content) {\n                throw new DeskExchangeError(\n                    \"Could not parse trading parameters from conversation\"\n                );\n            }\n\n            const endpoint = getEndpoint(runtime);\n\n            const wallet = new ethers.Wallet(\n                runtime.getSetting(\"DESK_EXCHANGE_PRIVATE_KEY\")\n            );\n            const jwt = await generateJwt(endpoint, wallet, 0, generateNonce());\n\n            elizaLogger.info(\n                \"Raw content from LLM:\",\n                JSON.stringify(content, null, 2)\n            );\n\n            const processesOrder = {\n                symbol: `${content.symbol}USD`,\n                side: content.side,\n                amount: content.amount,\n                price: content.price,\n                nonce: generateNonce(),\n                broker_id: \"DESK\",\n                order_type: Number(content.price) === 0 ? \"Market\" : \"Limit\",\n                reduce_only: false,\n                subaccount: getSubaccount(wallet.address, 0),\n            };\n            const parseResult = PlaceOrderSchema.safeParse(processesOrder);\n            if (!parseResult.success) {\n                throw new Error(\n                    `Invalid perp trade content: ${JSON.stringify(\n                        parseResult.error.errors,\n                        null,\n                        2\n                    )}`\n                );\n            }\n            elizaLogger.info(\n                \"Processed order:\",\n                JSON.stringify(processesOrder, null, 2)\n            );\n\n            const response = await placeOrder(\n                endpoint,\n                jwt,\n                processesOrder as PlaceOrderRequest\n            );\n\n            elizaLogger.info(response.data);\n\n            if (callback && response.status === 200) {\n                const orderResponse = response.data.data;\n                callback({\n                    text: `Successfully placed a ${orderResponse.side} ${\n                        orderResponse.order_type\n                    } order of size ${formatNumber(\n                        orderResponse.quantity\n                    )} on ${orderResponse.symbol} at ${\n                        orderResponse.order_type === \"Market\"\n                            ? \"market price\"\n                            : formatNumber(orderResponse.price) + \" USD\"\n                    } on DESK Exchange.`,\n                    content: response.data,\n                });\n            } else {\n                callback({\n                    text: `Place order failed with ${response.data.errors}.`,\n                    content: response.data,\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error executing trade:\", {\n                content,\n                message: error.message,\n                code: error.code,\n                data: error.response?.data,\n            });\n            if (callback) {\n                callback({\n                    text: `Error executing trade: ${error.message} ${error.response?.data?.errors}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Long 0.1 BTC at 20 USD\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll place a buy order for 0.1 BTC at 20 USD.\",\n                    action: \"PERP_TRADE\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Successfully placed a limit order to buy 0.1 BTC at 20 USD\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Short 2 BTC at 21 USD\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll place a sell order for 2 BTC at 21 USD.\",\n                    action: \"PERP_TRADE\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Successfully placed a limit order to sell 2 BTC at 21 USD\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n};\n\nexport default perpTrade;\n","import { z } from \"zod\";\n\n// Base configuration types\nexport interface DeskExchangeConfig {\n    privateKey: string;\n    network?: \"mainnet\" | \"testnet\";\n    walletAddress?: string;\n}\n\nexport const PlaceOrderSchema = z.object({\n    symbol: z.string().min(1).toUpperCase(),\n    side: z.enum([\"Long\", \"Short\"]),\n    amount: z.number({ coerce: true }).positive(),\n    price: z.number({ coerce: true }),\n    nonce: z.string(),\n    broker_id: z.enum([\"DESK\"]),\n    order_type: z.enum([\"Market\", \"Limit\"]),\n    reduce_only: z.boolean(),\n    subaccount: z.string(),\n    timeInForce: z.enum([\"GTC\", \"IOC\", \"FOK\"]).optional(),\n});\nexport type PlaceOrderRequest = z.infer<typeof PlaceOrderSchema>;\n\nexport const CancelOrderSchema = z.object({\n    symbol: z.string().min(1).toUpperCase(),\n    subaccount: z.string(),\n    order_digest: z.string(),\n    nonce: z.string(),\n    is_conditional_order: z.boolean(),\n    wait_for_reply: z.boolean(),\n});\nexport type CancelOrderRequest = z.infer<typeof CancelOrderSchema>;\n\n// Error handling types\nexport class DeskExchangeError extends Error {\n    constructor(\n        message: string,\n        public code?: number,\n        public details?: unknown\n    ) {\n        super(message);\n        this.name = \"DeskExchangeError\";\n    }\n}","export const perpTradeTemplate = `Look at your LAST RESPONSE in the conversation where you confirmed a trade request.\nBased on ONLY that last message, extract the trading details:\n\nFor DESK Exchange perp trading:\n- Market orders (executes immediately at best available price):\n  \"perp buy 1 HYPE\" -> { \"symbol\": \"HYPE\", \"side\": \"Long\", \"amount\": \"1\" }\n  \"perp sell 2 HYPE\" -> { \"symbol\": \"HYPE\", \"side\": \"Short\", \"amount\": \"2\" }\n  \"perp market buy 1 HYPE\" -> { \"symbol\": \"HYPE\", \"side\": \"Long\", \"amount\": \"1\" }\n  \"perp market sell 2 HYPE\" -> { \"symbol\": \"HYPE\", \"side\": \"Short\", \"amount\": \"2\" }\n\n- Limit orders (waits for specified price):\n  \"buy 1 HYPE at 20 USDC\" -> { \"symbol\": \"HYPE\", \"side\": \"Long\", \"amount\": \"1\", \"price\": \"20\" }\n  \"sell 0.5 HYPE at 21 USDC\" -> { \"symbol\": \"HYPE\", \"side\": \"Short\", \"amount\": \"0.5\", \"price\": \"21\" }\n  \"limit buy 1 HYPE at 20 USDC\" -> { \"symbol\": \"HYPE\", \"side\": \"Long\", \"amount\": \"1\", \"price\": \"20\" }\n  \"limit sell 0.5 HYPE at 21 USDC\" -> { \"symbol\": \"HYPE\", \"side\": \"Short\", \"amount\": \"0.5\", \"price\": \"21\" }\n\n\\`\\`\\`json\n{\n    \"symbol\": \"<coin symbol>\",\n    \"side\": \"<Long for buy, Short for sell>\",\n    \"amount\": \"<quantity to trade>\",\n    \"price\": \"<\"price in USD if limit order, 0 if market order>\"\n}\n\\`\\`\\`\n\nNote:\n- Just use the coin symbol (HYPE, ETH, etc.)\n- price is optional:\n  - If specified (with \"at X USD\"), order will be placed at that exact price\n  - If not specified, order will be placed at current market price\n- Words like \"market\" or \"limit\" at the start are optional but help clarify intent\n\nRecent conversation:\n{{recentMessages}}`;\n\nexport const cancelOrderTemplate = `Look at your LAST RESPONSE in the conversation where you confirmed that user want to cancel all orders.\n\nFor example:\n- I would like to cancel all my orders.\n- Cancel all orders\n- Cancel orders please\n\nIf the user ask to cancel a specific order, please let them know that it is not possible at the moment. Let them know that you now only have the ability to cancel all order only.\n\nRecent conversation:\n{{recentMessages}}`;\n\nexport const accountSummaryTemplate = `Look at ONLY your LAST RESPONSE message in this conversation, where you just confirmed if the user want to check the information of their account.\n\nFor example:\n- I would like to check the summary of my account on DESK Exchange.\n- I want to check the information on my account.\n- How is my positions going?\n- How is my account?\n- Check account summary please\n\nLast part of conversation:\n{{recentMessages}}`;\n","import { type IAgentRuntime } from \"@elizaos/core\";\nimport { DeskExchangeError } from \"../types\";\nimport { ethers } from \"ethers\";\nimport axios from \"axios\";\nimport { randomBytes } from \"crypto\";\n\nexport const generateNonce = (): string => {\n    const expiredAt = BigInt(Date.now() + 1000 * 60) * BigInt(1 << 20);\n    const random = parseInt(randomBytes(3).toString(\"hex\"), 16) % (1 << 20);\n    return (expiredAt + BigInt(random)).toString();\n};\n\nexport const generateJwt = async (\n    endpoint: string,\n    wallet: ethers.Wallet,\n    subaccountId: number,\n    nonce: string\n): Promise<string> => {\n    const message = `generate jwt for ${wallet.address?.toLowerCase()} and subaccount id ${subaccountId} to trade on happytrading.global with nonce: ${nonce}`;\n    const signature = await wallet.signMessage(message);\n\n    const response = await axios.post(\n        `${endpoint}/v2/auth/evm`,\n        {\n            account: wallet.address,\n            subaccount_id: subaccountId.toString(),\n            nonce,\n            signature,\n        },\n        {\n            headers: { \"content-type\": \"application/json\" },\n        }\n    );\n\n    if (response.status === 200) {\n        return response.data.data.jwt;\n    } else {\n        throw new DeskExchangeError(\"Could not generate JWT\");\n    }\n};\n\nexport const getSubaccount = (\n    account: string,\n    subaccountId: number\n): string => {\n    // pad address with subaccountId to be 32 bytes (64 hex characters)\n    //  0x + 40 hex characters (address) + 24 hex characters (subaccountId)\n    const subaccountIdHex = BigInt(subaccountId).toString(16).padStart(24, \"0\");\n    return account.concat(subaccountIdHex);\n};\n\nexport const getEndpoint = (runtime: IAgentRuntime): string => {\n    return runtime.getSetting(\"DESK_EXCHANGE_NETWORK\") === \"mainnet\"\n        ? \"https://api.happytrading.global\"\n        : \"https://stg-trade-api.happytrading.global\";\n};\n\nexport const formatNumber = (\n    num: string | number,\n    decimalPlaces?: number\n): string => {\n    return Number(num).toLocaleString(undefined, {\n        style: \"decimal\",\n        minimumFractionDigits: 0,\n        maximumFractionDigits: decimalPlaces || 8,\n    });\n};\n","import { AxiosResponse } from \"axios\";\nimport { CancelOrderRequest, PlaceOrderRequest } from \"../types\";\nimport axios from \"axios\";\n\nexport const placeOrder = async (\n    endpoint: string,\n    jwt: string,\n    order: PlaceOrderRequest\n): Promise<AxiosResponse> => {\n    if (!endpoint || !jwt || !order) {\n        throw new Error(\"Missing required parameters\");\n    }\n    return await axios.post(`${endpoint}/v2/place-order`, order, {\n        headers: {\n            authorization: `Bearer ${jwt}`,\n            \"content-type\": \"application/json\",\n        },\n        timeout: 5000,\n        validateStatus: (status) => status === 200,\n    });\n};\n\nexport const cancelOrder = async (\n    endpoint: string,\n    jwt: string,\n    order: CancelOrderRequest\n): Promise<AxiosResponse> => {\n    if (!endpoint || !jwt || !order) {\n        throw new Error(\"Missing required parameters\");\n    }\n    if (!order.order_digest) {\n        throw new Error(\"Missing order digest\");\n    }\n    return await axios.post(`${endpoint}/v2/cancel-order`, order, {\n        headers: {\n            authorization: `Bearer ${jwt}`,\n            \"content-type\": \"application/json\",\n        },\n        timeout: 5000,\n        validateStatus: (status) => status === 200,\n    });\n};\n","import {\n    type Action,\n    type ActionExample,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    composeContext,\n    elizaLogger,\n} from \"@elizaos/core\";\nimport { accountSummaryTemplate } from \"../templates\";\nimport { ethers } from \"ethers\";\nimport {\n    generateNonce,\n    generateJwt,\n    getSubaccount,\n    getEndpoint,\n    formatNumber,\n} from \"../services/utils\";\nimport { getSubaccountSummary } from \"../services/account\";\n\nexport const accountSummary: Action = {\n    name: \"GET_PERP_ACCOUNT_SUMMARY\",\n    similes: [\n        \"CHECK_ACCOUNT\",\n        \"CHECK_PERP_ACCOUNT\",\n        \"ACCOUNT_SUMMARY\",\n        \"PERP_ACCOUNT_SUMMARY\",\n    ],\n    description: \"Get the current account summary\",\n    validate: async (runtime: IAgentRuntime) => {\n        return !!(\n            runtime.getSetting(\"DESK_EXCHANGE_PRIVATE_KEY\") &&\n            runtime.getSetting(\"DESK_EXCHANGE_NETWORK\")\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        // Initialize or update state\n        state = !state\n            ? await runtime.composeState(message)\n            : await runtime.updateRecentMessageState(state);\n\n        const context = composeContext({\n            state,\n            template: accountSummaryTemplate,\n        });\n\n        try {\n            const endpoint = getEndpoint(runtime);\n            const wallet = new ethers.Wallet(\n                runtime.getSetting(\"DESK_EXCHANGE_PRIVATE_KEY\")\n            );\n            const jwt = await generateJwt(endpoint, wallet, 0, generateNonce());\n\n            const response = await getSubaccountSummary(\n                endpoint,\n                jwt,\n                getSubaccount(wallet.address, 0)\n            );\n            elizaLogger.info(response.data);\n\n            const subaccountSummaryData = response.data.data;\n            const positionSummary =\n                subaccountSummaryData.positions.length > 0\n                    ? subaccountSummaryData.positions\n                          .map((p) => {\n                              return `- ${p.side} ${formatNumber(p.quantity)} ${\n                                  p.symbol\n                              }`;\n                          })\n                          .join(\"\\n\")\n                    : \"- No active position\";\n            const orderSummary =\n                subaccountSummaryData.open_orders.length > 0\n                    ? subaccountSummaryData.open_orders\n                          .map((o) => {\n                              return `- ${\n                                  o.side === \"Long\" ? \"Buy\" : \"Sell\"\n                              } ${formatNumber(\n                                  Number(o.original_quantity) -\n                                      Number(o.remaining_quantity)\n                              )}/${formatNumber(o.original_quantity)} ${\n                                  o.symbol\n                              } @${\n                                  Number(o.price) > 0\n                                      ? formatNumber(o.price)\n                                      : formatNumber(o.trigger_price)\n                              }`;\n                          })\n                          .join(\"\\n\")\n                    : \"- No orders\";\n            const collateralSummary =\n                subaccountSummaryData.collaterals.length > 0\n                    ? subaccountSummaryData.collaterals\n                          .map((c) => {\n                              return `- ${formatNumber(c.amount, 4)} ${\n                                  c.asset\n                              }`;\n                          })\n                          .join(\"\\n\")\n                    : \"- No collateral\";\n            callback({\n                text:\n                    `Here is the summary of your account ${wallet.address}\\n` +\n                    `Your positions:\\n` +\n                    positionSummary +\n                    `\\n` +\n                    `Your orders:\\n` +\n                    orderSummary +\n                    `\\n` +\n                    `Your collaterals:\\n` +\n                    collateralSummary,\n                content: subaccountSummaryData,\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error getting account summary:\", {\n                message: error.message,\n                code: error.code,\n                data: error.response?.data,\n            });\n            if (callback) {\n                callback({\n                    text: `Error getting account summary: ${error.message} ${error.response?.data?.errors}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Check my account please\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Here is the summary of your account\",\n                    action: \"GET_PERP_ACCOUNT_SUMMARY\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"How is my account doing?\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Here is the summary of your account\",\n                    action: \"GET_PERP_ACCOUNT_SUMMARY\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Account summary\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Here is the summary of your account\",\n                    action: \"GET_PERP_ACCOUNT_SUMMARY\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n};\n\nexport default accountSummary;\n","import { AxiosResponse } from \"axios\";\nimport axios from \"axios\";\n\nexport const getSubaccountSummary = async (\n    endpoint: string,\n    jwt: string,\n    subaccount: string\n): Promise<AxiosResponse> => {\n    if (!endpoint || !jwt || !subaccount) {\n        throw new Error(\"Missing required parameters\");\n    }\n    return await axios.get(`${endpoint}/v2/subaccount-summary/${subaccount}`, {\n        headers: {\n            authorization: `Bearer ${jwt}`,\n            \"content-type\": \"application/json\",\n        },\n        timeout: 5000,\n        validateStatus: (status) => status === 200,\n    });\n};\n","import {\n    type Action,\n    type ActionExample,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type HandlerCallback,\n    elizaLogger,\n    composeContext,\n} from \"@elizaos/core\";\nimport {\n    generateJwt,\n    generateNonce,\n    getEndpoint,\n    getSubaccount,\n} from \"../services/utils\";\nimport { ethers } from \"ethers\";\nimport { getSubaccountSummary } from \"../services/account\";\nimport { cancelOrder } from \"../services/trade\";\nimport { cancelOrderTemplate } from \"../templates\";\n\nexport const cancelOrders: Action = {\n    name: \"CANCEL_ORDERS\",\n    similes: [\"CANCEL_ALL_ORDERS\", \"CANCEL\", \"CANCEL_ALL\"],\n    description: \"Cancel all open orders on DESK Exchange\",\n    validate: async (runtime: IAgentRuntime) => {\n        return !!(\n            runtime.getSetting(\"DESK_EXCHANGE_PRIVATE_KEY\") &&\n            runtime.getSetting(\"DESK_EXCHANGE_NETWORK\")\n        );\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        // Initialize or update state\n        state = !state\n            ? await runtime.composeState(message)\n            : await runtime.updateRecentMessageState(state);\n        const context = composeContext({\n            state,\n            template: cancelOrderTemplate,\n        });\n\n        try {\n            const endpoint = getEndpoint(runtime);\n            const wallet = new ethers.Wallet(\n                runtime.getSetting(\"DESK_EXCHANGE_PRIVATE_KEY\")\n            );\n            const jwt = await generateJwt(endpoint, wallet, 0, generateNonce());\n\n            const subaccountSummaryResponse = await getSubaccountSummary(\n                endpoint,\n                jwt,\n                getSubaccount(wallet.address, 0)\n            );\n\n            const openOrders =\n                subaccountSummaryResponse.data?.data?.open_orders;\n\n            if (openOrders && openOrders.length > 0) {\n                for (const o of openOrders) {\n                    await cancelOrder(endpoint, jwt, {\n                        symbol: o.symbol,\n                        subaccount: getSubaccount(wallet.address, 0),\n                        order_digest: o.order_digest,\n                        nonce: generateNonce(),\n                        is_conditional_order: false,\n                        wait_for_reply: false,\n                    });\n                }\n                callback({\n                    text: `Successfully cancelled ${openOrders.length} orders.`,\n                });\n            }\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error canceling orders:\", {\n                message: error.message,\n                code: error.code,\n                data: error.response?.data,\n            });\n            if (callback) {\n                callback({\n                    text: `Error canceling orders: ${error.message} ${error.response?.data?.errors}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Cancel all my orders\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll cancel all your open orders.\",\n                    action: \"CANCEL_ORDERS\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Successfully cancelled 2 open orders\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n};\n\nexport default cancelOrders;\n","import type { Plugin } from \"@elizaos/core\";\nimport { perpTrade } from \"./actions/perpTrade\";\nimport accountSummary from \"./actions/accountSummary\";\nimport cancelOrders from \"./actions/cancelOrders\";\n\nexport const deskExchangePlugin: Plugin = {\n    name: \"deskExchange\",\n    description: \"DESK Exchange plugin\",\n    actions: [perpTrade, accountSummary, cancelOrders],\n    providers: [],\n    evaluators: [],\n    services: [],\n    clients: [],\n};\n\nexport default deskExchangePlugin;\n"],"mappings":"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","names":["axios","composeContext","elizaLogger","ethers","axios","composeContext","ethers","elizaLogger","elizaLogger","composeContext","ethers","composeContext","ethers","elizaLogger"]}